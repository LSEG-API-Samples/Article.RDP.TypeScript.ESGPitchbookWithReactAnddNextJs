import { Session } from '../../../session';
import { AbstractStateManager } from '../../../state';
import { OnAddCallback, OnCompleteCallback, OnErrorCallback, OnRemoveCallback, OnUpdateCallback, Params, RequestParams, Stream } from './streaming-chain.interface';
export declare class StreamingChainImpl extends AbstractStateManager implements Stream {
    private session;
    name: string;
    protected streamingChainEmitter: Stream;
    private params;
    private constituentList;
    private displayTemplate;
    private chainRecordsNames;
    private chainRecordNameToItemStream;
    private chainRecordNameToResolveCallback;
    private chainRecordNameToStatus;
    private chainRecordNameToChainRecord;
    private chainRecordNameToOffset;
    private chainRecordNameToUpdateData;
    private chainRecordNameToError;
    private isDecodingComplete;
    constructor(session: Session, name: string, params?: RequestParams);
    get definition(): Params;
    initialize(): Promise<void>;
    cleanUp(): Promise<void>;
    get isChain(): boolean;
    get constituents(): string[];
    get summaryLinks(): string[];
    onAdd(cb: OnAddCallback): this;
    onRemove(cb: OnRemoveCallback): this;
    onUpdate(cb: OnUpdateCallback): this;
    onComplete(cb: OnCompleteCallback): this;
    onError(cb: OnErrorCallback): this;
    private processRemainingUpdateData;
    private parallelDecode;
    private openItemStreamForChainRecord;
    private processErrors;
    private emitItemStreamError;
    private addItemStreamListeners;
    private validateSessionState;
    private hasChainRecord;
    private onRefresh;
    private onUpdateOMMStream;
    private onStatus;
    private onStateChanged;
    private checkAllChainRecordsClosed;
    private processChainRecord;
    private updateChainRecord;
    private extractConstituents;
    private appendConstituent;
    private updateConstituent;
    private removeConstituent;
    private getNumberOfSummaryLinks;
}
